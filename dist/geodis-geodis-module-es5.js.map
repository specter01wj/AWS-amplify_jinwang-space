{"version":3,"sources":["webpack:///src/app/pages/my-demo-projects/geodis/geodis-routing.module.ts","webpack:///src/app/pages/my-demo-projects/geodis/geodis.module.ts","webpack:///src/app/pages/my-demo-projects/geodis/home/home.component.ts","webpack:///src/app/pages/my-demo-projects/geodis/home/home.component.html","webpack:///src/app/pages/my-demo-projects/geodis/home/item-create/item-create.component.ts","webpack:///src/app/pages/my-demo-projects/geodis/home/item-create/item-create.component.html","webpack:///src/app/pages/my-demo-projects/geodis/home/item-detail/item-detail.component.ts","webpack:///src/app/pages/my-demo-projects/geodis/home/item-detail/item-detail.component.html","webpack:///src/app/pages/my-demo-projects/geodis/home/items/items.component.ts","webpack:///src/app/pages/my-demo-projects/geodis/home/items/items.component.html","webpack:///src/app/pages/my-demo-projects/geodis/services/account.service.ts"],"names":["routes","path","component","redirectTo","pathMatch","GeodisRoutingModule","forChild","imports","exports","GeodisModule","declarations","HomeComponent","pageTitle","selector","templateUrl","styleUrls","ItemCreateComponent","fb","route","router","powers","productForm","group","productName","productCodeId","starRatingId","qtyId","availDateId","locationId","reset","navigate","saveProduct","ItemDetailComponent","accountService","errorMessage","param","snapshot","paramMap","get","id","getProduct","getItem","subscribe","next","product","error","err","relativeTo","parent","onBack","ItemsComponent","products","getItems","AccountService","http","userUrl","itemsUrl","username","password","pipe","user","userSubject","data","console","log","JSON","stringify","handleError","initializeProduct","url","itemName","itemType","provider","qty","availDate","vendor","location","ErrorEvent","message","status","body","providedIn"],"mappings":"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","file":"geodis-geodis-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { HomeComponent } from './home/home.component';\nimport { ItemsComponent } from './home/items/items.component';\nimport { ItemDetailComponent } from './home/item-detail/item-detail.component';\nimport { ItemCreateComponent } from './home/item-create/item-create.component';\n\nconst routes: Routes = [\n\t{ path: '', component: HomeComponent },\n  { path: 'geodis-dashboard', component: HomeComponent },\n  { path: 'geodis-items', component: ItemsComponent },\n  { path: 'geodis-items/:id', component: ItemDetailComponent },\n  { path: 'geodisCreate', component: ItemCreateComponent },\n  { path: '', redirectTo: 'geodis-dashboard', pathMatch: 'full' },\n  { path: '**', redirectTo: '' }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class GeodisRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { GeodisRoutingModule } from './geodis-routing.module';\n\nimport { GeodisComponent } from './geodis.component';\nimport { HomeComponent } from './home/home.component';\nimport { ItemsComponent } from './home/items/items.component';\nimport { ItemDetailComponent } from './home/item-detail/item-detail.component';\nimport { ItemCreateComponent } from './home/item-create/item-create.component';\n\n\n@NgModule({\n  declarations: [\n  \tGeodisComponent,\n    HomeComponent,\n    ItemsComponent,\n    ItemDetailComponent,\n    ItemCreateComponent\n  ],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    GeodisRoutingModule\n  ]\n})\nexport class GeodisModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.less']\n})\nexport class HomeComponent implements OnInit {\n\tpageTitle = 'Geodis Dashboard';\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"card\">\n  <div class=\"card-header\">\n    {{pageTitle}}\n  </div>\n\n  <div class=\"card-body\">\n\n    <div class=\"table-responsive\">\n    \t<app-items></app-items>\n    </div>\n\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-item-create',\n  templateUrl: './item-create.component.html',\n  styleUrls: ['./item-create.component.less']\n})\nexport class ItemCreateComponent implements OnInit {\n\tpageTitle = 'Item Create';\n\terrorMessage: string;\n\tproductForm: FormGroup;\n\n\tpowers = ['Really Smart', 'Super Flexible', 'Weather Changer'];\n\n  constructor(private fb: FormBuilder,\n              private route: ActivatedRoute,\n              private router: Router) { \n  \tthis.productForm = fb.group({\n      productName: [''],\n      productCodeId: [''],\n      starRatingId: [''],\n      qtyId: [''],\n      availDateId: [''],\n      locationId: ['']\n    });\n  }\n\n  ngOnInit(): void {\n  }\n\n  saveProduct(): void {\n    // Reset the form to clear the flags\n    this.productForm.reset();\n    this.router.navigate(['./geodis-dashboard']);\n  }\n\n}\n","<div class=\"card\">\n  <div class=\"card-header\">\n    {{pageTitle}}\n  </div>\n\n  <div class=\"card-body\">\n    <form novalidate\n          (ngSubmit)=\"saveProduct()\"\n          [formGroup]=\"productForm\">\n\n      <div class=\"form-group row mb-2\">\n        <label class=\"col-md-2 col-form-label\"\n               for=\"productNameId\">Item Name</label>\n        <div class=\"col-md-8\">\n          <input class=\"form-control\"\n                 id=\"productNameId\"\n                 type=\"text\"\n                 placeholder=\"Name (required)\" \n                 formControlName=\"productName\" />\n        </div>\n      </div>\n\n      <div class=\"form-group row mb-2\">\n        <label class=\"col-md-2 col-form-label\"\n               for=\"productCodeId\">Item Type</label>\n        <div class=\"col-md-8\">\n        \t<select class=\"form-control\"\n                 id=\"productCodeId\"\n                 type=\"text\"\n                 placeholder=\"Code (required)\" \n                 formControlName=\"productCodeId\">\n\t\t\t\t    <option value=\"0\">--No Selection--</option>\n\t\t\t\t    <option *ngFor=\"let power of powers\" value={{power}}>\n\t\t\t\t      {{power}}\n\t\t\t\t    </option>\n\t\t\t\t  </select>\n        </div>\n      </div>\n\n      <div class=\"form-group row mb-2\">\n        <label class=\"col-md-2 col-form-label\"\n               for=\"starRatingId\">Provider</label>\n        <div class=\"col-md-8\">\n          <input class=\"form-control\"\n                 id=\"starRatingId\"\n                 type=\"text\"\n                 placeholder=\"Provider\" \n                 formControlName=\"starRatingId\" />\n        </div>\n      </div>\n\n      <div class=\"form-group row mb-2\">\n        <label class=\"col-md-2 col-form-label\"\n               for=\"qtyId\">Qty</label>\n        <div class=\"col-md-8\">\n          <input class=\"form-control\"\n                 id=\"qtyId\"\n                 type=\"text\"\n                 placeholder=\"Qty\" \n                 formControlName=\"qtyId\" />\n        </div>\n      </div>\n\n      <div class=\"form-group row mb-2\">\n        <label class=\"col-md-2 col-form-label\"\n               for=\"availDateId\">Available date</label>\n        <div class=\"col-md-8\">\n          <input class=\"form-control\"\n                 id=\"availDateId\"\n                 type=\"date\"\n                 placeholder=\"Available date\" \n                 formControlName=\"availDateId\" />\n        </div>\n      </div>\n\n      <div class=\"form-group row mb-2\">\n        <label class=\"col-md-2 col-form-label\"\n               for=\"locationId\">Location</label>\n        <div class=\"col-md-8\">\n          <input class=\"form-control\"\n                 id=\"locationId\"\n                 type=\"text\"\n                 placeholder=\"Location\" \n                 formControlName=\"locationId\" />\n        </div>\n      </div>\n\n      <div class=\"form-group row mb-2\">\n        <div class=\"offset-md-2 col-md-4\">\n          <button class=\"btn btn-primary mr-3\"\n                  style=\"width:80px;\"\n                  type=\"submit\">\n            Create\n          </button>\n          <button class=\"btn btn-outline-secondary mr-3\"\n                  style=\"width:80px;\"\n                  type=\"button\"\n                  title=\"Cancel your create\"\n                  [routerLink]=\"['./geodis-dashboard']\">\n            Cancel\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n\n  <div class=\"alert alert-danger\"\n       *ngIf=\"errorMessage\">{{errorMessage}}\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { Product } from '../../models/product';\nimport { AccountService } from '../../services/account.service';\n\n@Component({\n  selector: 'app-item-detail',\n  templateUrl: './item-detail.component.html',\n  styleUrls: ['./item-detail.component.less']\n})\nexport class ItemDetailComponent implements OnInit {\n\tproduct: Product | undefined;\n\terrorMessage = '';\n\n  constructor(private route: ActivatedRoute,\n              private router: Router,\n              private accountService: AccountService) { }\n\n  ngOnInit(): void {\n  \tconst param = this.route.snapshot.paramMap.get('id');\n    if (param) {\n      const id = +param;\n      this.getProduct(id);\n    }\n  }\n\n  getProduct(id: number) {\n    this.accountService.getItem(id).subscribe({\n      next: product => this.product = product,\n      error: err => this.errorMessage = err\n    });\n  }\n\n  onBack(): void {\n    this.router.navigate(['./geodis-dashboard'], { relativeTo: this.route.parent });\n  }\n\n}\n","<table class=\"table mb-0\">\n  <thead>\n    <tr>\n      <th>\n        \n      </th>\n      <th>Item</th>\n      <th>Item Type</th>\n      <th>Provider</th>\n      <th>Vendor</th>\n      <th>Qty</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n      </td>\n      <td>\n      \t<a [routerLink]=\"['/geodis-items', product.id]\">\n          {{ product.itemName }}\n        </a>\n      </td>\n      <td>{{ product.itemType }}</td>\n      <td>{{ product.provider }}</td>\n      <td>{{ product.vendor }}</td>\n      <td>{{ product.qty }}</td>\n      <td>\n        \n      </td>\n    </tr>\n  </tbody>\n  <tfoot>\n  \t<button class=\"btn btn-outline-secondary mr-3\"\n            style=\"width:80px\"\n            (click)=\"onBack()\">\n      <i class=\"fa fa-chevron-left\"></i> Back\n    </button>\n  </tfoot>\n </table>","import { Component, OnInit } from '@angular/core';\n\nimport { Product } from '../../models/product';\nimport { AccountService } from '../../services/account.service';\n\n@Component({\n  selector: 'app-items',\n  templateUrl: './items.component.html',\n  styleUrls: ['./items.component.less']\n})\nexport class ItemsComponent implements OnInit {\n\tproducts: Product[] = [];\n\terrorMessage = '';\n\n  constructor(private accountService: AccountService) { }\n\n  ngOnInit(): void {\n  \tthis.accountService.getItems().subscribe({\n      next: products => {\n        this.products = products;\n      },\n      error: err => this.errorMessage = err\n    });\n  }\n\n}\n","<table class=\"table mb-0\">\n  <thead>\n    <tr>\n      <th>\n        \n      </th>\n      <th>Item</th>\n      <th>Item Type</th>\n      <th>Location</th>\n      <th>QTY</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let product of products\">\n      <td>\n      </td>\n      <td>\n      \t<a [routerLink]=\"['./geodis-items', product.id]\">\n          {{ product.itemName }}\n        </a>\n      </td>\n      <td>{{ product.itemType }}</td>\n      <td>{{ product.location }}</td>\n      <td>{{ product.qty }}</td>\n      <td>\n        \n      </td>\n    </tr>\n  </tbody>\n  <tfoot>\n  \t<button class=\"btn btn-outline-primary btn-sm\"\n            [routerLink]=\"['./geodisCreate']\">\n      Add Item\n    </button>\n  </tfoot>\n </table>","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of, throwError } from 'rxjs';\nimport { map, catchError, tap } from 'rxjs/operators';\n\nimport { User } from '../models/user';\nimport { Product } from '../models/product';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService {\n\tpublic user: Observable<User>;\n\t// private userUrl = 'assets/json/userData.json';\n  private userUrl = 'api/userData';\n  // private itemsUrl = 'assets/json/itemsData.json';\n  private itemsUrl = 'api/products';\n\tprivate userSubject: User;\n\n  constructor(\n  \tprivate router: Router,\n    private http: HttpClient\n \t) { }\n\n  login(username, password) {\n    // return this.http.put<User>(this.userUrl, { username, password })\n    return this.http.get<User>(this.userUrl)\n        .pipe(\n        \tmap(user => {\n            this.userSubject = user[0];\n            return user;\n        \t})\n        );\n  }\n\n  getItems(): Observable<Product[]> {\n    return this.http.get<Product[]>(this.itemsUrl)\n      .pipe(\n        tap(data => console.log(JSON.stringify(data))),\n        catchError(this.handleError)\n      );\n  }\n\n  getItem(id: number): Observable<Product> {\n    if (id === 0) {\n      return of(this.initializeProduct());\n    }\n    const url = `${this.itemsUrl}/${id}`;\n    return this.http.get<Product>(url)\n      .pipe(\n        tap(data => console.log('getProduct: ' + JSON.stringify(data))),\n        catchError(this.handleError)\n      );\n  }\n\n  public get userValue(): User {\n      return this.userSubject;\n  }\n\n  private initializeProduct(): Product {\n    // Return an initialized object\n    return {\n      id: 0,\n      itemName: null,\n      itemType: null,\n      provider: null,\n      qty: 0,\n      availDate: null,\n      vendor: null,\n      location: null\n    };\n  }\n\n  private handleError(err) {\n    // in a real world app, we may send the server to some remote logging infrastructure\n    // instead of just logging it to the console\n    let errorMessage: string;\n    if (err.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      errorMessage = `An error occurred: ${err.error.message}`;\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      errorMessage = `Backend returned code ${err.status}: ${err.body.error}`;\n    }\n    console.error(err);\n    return throwError(errorMessage);\n  }\n\n}\n"]}